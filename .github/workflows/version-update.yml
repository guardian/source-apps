name: Version Update

on:
  workflow_call:
    inputs:
      SOURCE_DIR:
        description: 'Path to source directory. For monorepos, this is the path to the library source directory. Leave empty for the root directory.'
        required: false
        default: ''
        type: string
      API_FILE:
        description: 'Path to API file relative to the source directory.'
        required: false
        default: 'api/api.txt'
        type: string
      VERSION_FILE:
        description: 'Path to version file relative to the source directory.'
        required: false
        default: 'version.txt'
        type: string
      GITHUB_APP_ID:
        description:
          "App ID for a GitHub App that is allowed to push directly to the default branch. Eg, App ID on:
          https://github.com/organizations/guardian/settings/apps/gu-scala-library-release"
        default: '807361' # Only for use by the Guardian!
        required: false # ...but if you're not the Guardian, you'll want to set this explicitly
        type: string
    secrets:
      SONATYPE_TOKEN:
        description: 'Sonatype authentication token, colon-separated (username:password) - https://central.sonatype.org/publish/generate-token/'
        required: true
      PGP_PRIVATE_KEY:
        description:
          "A passphrase-less PGP private key used to sign artifacts, commits, & tags.
          Should be in normal plaintext (ASCII-armored) format, starting 'BEGIN PGP PUBLIC KEY BLOCK', with no additional BASE64-encoding.
          The passphrase can be removed from an existing key using 'gpg --edit-key <key-id> passwd' : https://unix.stackexchange.com/a/550538/46453"
        required: true
      GITHUB_APP_PRIVATE_KEY:
        description:
          "See https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/managing-private-keys-for-github-apps#generating-private-keys
          Should be in normal plaintext format, starting '-----BEGIN RSA PRIVATE KEY-----'"
        required: true
    outputs:
      RELEASE_VERSION:
        description: "The un-prefixed version number of the release, eg '3.0.1'"
        value: ${{ jobs.push-release-commit.outputs.release_version }}
      RELEASE_TYPE:
        description: "Either 'FULL_MAIN_BRANCH' or 'PREVIEW_FEATURE_BRANCH' - whether this is a full release or a pre-release"
        value: ${{ jobs.init.outputs.release_type }}

env:
  LOCAL_ARTIFACTS_STAGING_PATH: /tmp/artifact_staging
  COMMITTER_NAME: "@${{github.actor}} using gha-gradle-library-release-workflow"
  RUN_ATTEMPT_UID: ${{ github.run_id }}-${{ github.run_attempt }}
  TEMPORARY_BRANCH: release-workflow/temporary/${{ github.run_id }}
  GITHUB_REPO_URL: ${{ github.server_url }}/${{ github.repository }}

jobs:
  init:
    name: üîí Init
    runs-on: ubuntu-latest
    outputs:
      key_fingerprint: ${{ steps.read-identifiers.outputs.key_fingerprint }}
      key_email: ${{ steps.read-identifiers.outputs.key_email }}
      release_type: ${{ steps.generate-version-suffix.outputs.release_type }}
      version_suffix: ${{ steps.generate-version-suffix.outputs.version_suffix }}
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
      - name: Read Identifiers from Signing Key
        id: read-identifiers
        run: |
          key_fingerprint_and_email=$(gpg2 --list-secret-keys --list-options show-only-fpr-mbox)
          key_fingerprint=$(echo $key_fingerprint_and_email | awk '{print $1}')
          key_email=$(echo $key_fingerprint_and_email | awk '{print $2}')
          echo "key_fingerprint=$key_fingerprint"
          
          cat << EndOfFile >> $GITHUB_OUTPUT
          key_fingerprint=$key_fingerprint
          key_email=$key_email
          EndOfFile
          if ! [[ "$key_fingerprint" =~ ^[[:xdigit:]]{8,}$ ]]; then
            echo "::error title=Missing PGP key::Has PGP_PRIVATE_KEY been set correctly? https://github.com/guardian/gha-gradle-library-release-workflow/blob/main/docs/credentials/supplying-credentials.md"
            exit 1
          fi
      - name: Check for default branch
        id: generate-version-suffix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          default_branch=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name ${{ github.repository }})
          
          if [[ "$default_branch" = $GITHUB_REF_NAME ]]; then
            release_type="FULL_MAIN_BRANCH"
            version_suffix=""
          else
            release_type="PREVIEW_FEATURE_BRANCH"
            version_suffix="-PREVIEW.${GITHUB_REF_NAME//[^[:alnum:]-]/}.$(date +%Y-%m-%dT%H%M).${GITHUB_SHA:0:8}"
          fi
          echo "current branch: $GITHUB_REF_NAME, release_type: $release_type, version_suffix: $version_suffix"
          cat << EndOfFile >> $GITHUB_OUTPUT
          release_type=$release_type
          version_suffix=$version_suffix
          EndOfFile


  generate-version-update-commits:
    name: ü§∏üèΩ Generate version update commits
    runs-on: ubuntu-latest
    needs: init
    outputs:
      library_build_major_java_version: ${{ steps.establish_java_for_library_build.outputs.library_build_major_java_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Establish library build Java version
        id: establish_java_for_library_build
        run: |
          SOURCE_DIR="${{ inputs.SOURCE_DIR }}"
          if [ -n "$SOURCE_DIR" ]; then
            if [ ! -d "$SOURCE_DIR" ]; then
              echo "::error title=Source directory not found::$SOURCE_DIR does not exist."
              exit 1
            fi
            cd "$SOURCE_DIR"
          fi
          
          # Check if .tool-versions file exists
          if [ ! -f .tool-versions ]; then
            echo "::error title=Missing .tool-versions file::gha-gradle-library-release-workflow requires an asdf-format .tool-versions file to establish the Java version for the build."
            exit 1
          fi
          
          # Check if the file contains a Java version
          LIBRARY_BUILD_MAJOR_JAVA_VERSION=$( grep -Eo 'java [[:alnum:]-]+-[[:digit:]]+' .tool-versions | rev | cut -d'-' -f1 | rev )
          echo "Using Java $LIBRARY_BUILD_MAJOR_JAVA_VERSION"
          if [ -z "${LIBRARY_BUILD_MAJOR_JAVA_VERSION}" ]; then
            echo "::error title=Missing Java version in .tool-versions file::Could not establish the library's required Java version - the '.tool-versions' file should have a line like 'java corretto-21.0.3.9.1'."
            exit 1
          fi
          
          # Set the output variable for the Java version
          cat << EndOfFile >> $GITHUB_OUTPUT
          library_build_major_java_version=$LIBRARY_BUILD_MAJOR_JAVA_VERSION
          EndOfFile

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ steps.establish_java_for_library_build.outputs.library_build_major_java_version }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      - name: Set up Git user
        run: |
          git config user.email "${{ needs.init.outputs.key_email }}"
          git config user.name "$COMMITTER_NAME"

      - name: Update version and API files
        run: |
          set -e

          # Check and switch to source directory if provided and exists
          SOURCE_DIR="${{ inputs.SOURCE_DIR }}"
          if [ -n "$SOURCE_DIR" ]; then
            if [ ! -d "$SOURCE_DIR" ]; then
              echo "::error title=Source directory not found::$SOURCE_DIR does not exist."
              exit 1
            fi
            cd "$SOURCE_DIR"
          fi

          VERSION_FILE="${{ inputs.VERSION_FILE }}"
          API_FILE="${{ inputs.API_FILE }}"
          TMP_API_FILE=$(mktemp)

          # If the version file does not exist, create it with a default version
          if [ ! -f "$VERSION_FILE" ]; then
            echo "0.0.1" > "$VERSION_FILE"
          fi

          # Read major, minor, and patch version from the version file
          VERSION=$(cat "$VERSION_FILE" | tr -d ' \n\r')
          IFS='.' read -r MAJOR MINOR PATCH <<EOF
          $VERSION
          EOF

          # Validate version format
          if ! [[ "$MAJOR" =~ ^[0-9]+$ && "$MINOR" =~ ^[0-9]+$ && "$PATCH" =~ ^[0-9]+$ ]]; then
            echo "::error title=Invalid version format::Version file '$VERSION_FILE' must contain a valid semantic version (e.g., 1.0.0)."
            exit 1
          fi

          # Create a temporary copy of the API file for comparison
          cp "$API_FILE" "$TMP_API_FILE"

          # Check API compatibility
          set +e
          ./gradlew :source:metalavaCheckCompatibilityRelease
          RESULT=$?
          set -e

          if [ $RESULT -ne 0 ]; then
            # If compatibility check fails, increment major version and reset minor and patch
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            # Generate new API signature
            ./gradlew :source:metalavaGenerateSignatureRelease
          else
            # Generate new API signature and compare with the previous one
            ./gradlew :source:metalavaGenerateSignatureRelease
            if ! cmp -s "$API_FILE" "$TMP_API_FILE"; then
              # If API file has changed, increment minor version and reset patch
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              # If API file has not changed, increment patch version
              PATCH=$((PATCH + 1))
            fi
          fi
          

          # Update version file with the new version
          echo "$MAJOR.$MINOR.$PATCH" > "$VERSION_FILE"

          echo "Updated version to $MAJOR.$MINOR.$PATCH"
          
          # Commit the updated version and API files
          git add "$VERSION_FILE" "$API_FILE"
          git commit -m "chore: update version to $MAJOR.$MINOR.$PATCH"
          # Add version_suffix to the version and tag the commit with the new version number
          git tag "v$MAJOR.$MINOR.$PATCH-${{ needs.init.outputs.version_suffix }}"

          rm -f "$TMP_API_FILE"

      - name: Create bare repo with unsigned version update commits
        run: |
          cd `mktemp -d`
          git clone --bare $GITHUB_WORKSPACE repo-with-unsigned-version-update-commits.git
          rm -Rf $GITHUB_WORKSPACE/*
          mv repo-with-unsigned-version-update-commits.git $GITHUB_WORKSPACE/
          ls -lR $GITHUB_WORKSPACE

      - name: Job summary
        run: |
          cat << EndOfFile >> $GITHUB_STEP_SUMMARY
          Release $(git describe --tags --abbrev=0)
          Library built with Java ${{ steps.establish_java_for_library_build.outputs.library_build_major_java_version }}.
          EndOfFile

      - uses: actions/cache/save@v4
        with:
          path: repo-with-unsigned-version-update-commits.git
          key: repo-with-unsigned-version-update-commits-${{ env.RUN_ATTEMPT_UID }}

  push-release-commit:
    name: üîí Push Release Commit
    needs: [generate-version-update-commits, init]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.create-commit.outputs.release_tag }}
      release_notes_url: ${{ steps.create-commit.outputs.release_notes_url }}
      release_version: ${{ steps.create-commit.outputs.release_version }}
      release_commit_id: ${{ steps.create-commit.outputs.release_commit_id }}
      version_file_path: ${{ steps.create-commit.outputs.version_file_path }}
      version_file_release_sha: ${{ steps.create-commit.outputs.version_file_release_sha }}
      version_file_post_release_content: ${{ steps.create-commit.outputs.version_file_post_release_content }}
      api_file_path: ${{ steps.create-commit.outputs.api_file_path }}
      api_file_release_sha: ${{ steps.create-commit.outputs.api_file_release_sha }}
      api_file_post_release_content: ${{ steps.create-commit.outputs.api_file_post_release_content }}
    steps:
      - name: Generate app token
        id: generate-github-app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ inputs.GITHUB_APP_ID }}
          private-key: ${{ secrets.GITHUB_APP_PRIVATE_KEY }} }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Restore cache with unsigned version update commits
        uses: actions/cache/restore@v4
        with:
          path: repo-with-unsigned-version-update-commits.git
          key: repo-with-unsigned-version-update-commits-${{ env.RUN_ATTEMPT_UID }}
          fail-on-cache-miss: true

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 17
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}

      - name: Create commit
        id: create-commit
        env:
          KEY_FINGERPRINT: ${{ needs.init.outputs.key_fingerprint }}
          KEY_EMAIL: ${{ needs.init.outputs.key_email }}
          GH_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"
          echo "GITHUB_REF=$GITHUB_REF"
  
          BASE_PATH=$(pwd)

          cd repo-with-unsigned-version-update-commits.git
          RELEASE_TAG=$(git describe --tags --abbrev=0)

          INCOMING_REPO_PATH="$(pwd)"
  
          cd ../repo

          SOURCE_DIR="${{ inputs.SOURCE_DIR }}"
          if [ -n "$SOURCE_DIR" ]; then
            if [ ! -d "$SOURCE_DIR" ]; then
              echo "::error title=Source directory not found::$SOURCE_DIR does not exist."
              exit 1
            fi
            cd "$SOURCE_DIR"
          fi
  
          git remote add unsigned $INCOMING_REPO_PATH
          git fetch unsigned
  
          RELEASE_VERSION=${RELEASE_TAG#"v"}
  
          if [[ "${{ needs.init.outputs.release_type }}" = "FULL_MAIN_BRANCH" ]]; then
            RELEASE_NOTES_URL=$GITHUB_REPO_URL/releases/tag/$RELEASE_TAG
          else
            # Use the PR url as the release notes url when doing a 'preview' release
            RELEASE_NOTES_URL=$( gh pr view $GITHUB_REF_NAME --json url -q .url )
          fi
  
          VERSION_FILE_PATH=$(git diff-tree --no-commit-id --name-only -r $RELEASE_TAG | grep ${ inputs.VERSION_FILE })
          VERSION_FILE_INITIAL_SHA=$( git rev-parse $GITHUB_REF:$VERSION_FILE_PATH )
          VERSION_FILE_RELEASE_SHA=$( git rev-parse $RELEASE_TAG:$VERSION_FILE_PATH )
          VERSION_FILE_RELEASE_CONTENT=$( git cat-file blob $RELEASE_TAG:$VERSION_FILE_PATH | base64 -w0)
          VERSION_FILE_POST_RELEASE_CONTENT=$( git cat-file blob unsigned/$GITHUB_REF_NAME:$VERSION_FILE_PATH | base64 -w0)

          API_FILE_PATH=$(git diff-tree --no-commit-id --name-only -r $RELEASE_TAG | grep ${ inputs.API_FILE })
          API_FILE_INITIAL_SHA=$( git rev-parse $GITHUB_REF:$API_FILE_PATH )
          API_FILE_RELEASE_SHA=$( git rev-parse $RELEASE_TAG:$API_FILE_PATH )
          API_FILE_RELEASE_CONTENT=$( git cat-file blob $RELEASE_TAG:$API_FILE_PATH | base64 -w0)
          API_FILE_POST_RELEASE_CONTENT=$( git cat-file blob unsigned/$GITHUB_REF_NAME:$API_FILE_PATH | base64 -w0)
  
          cd $BASE_PATH
  
          cat << EndOfFile > commit-message.txt
          $RELEASE_TAG published by ${{github.actor}}
  
          ${{github.actor}} published release version $RELEASE_VERSION
          using gha-gradle-library-release-workflow: https://github.com/guardian/gha-gradle-library-release-workflow
  
          Release-Version: $RELEASE_VERSION
          Release-Initiated-By: ${{ github.server_url }}/${{github.actor}}
          Release-Workflow-Run: $GITHUB_REPO_URL/actions/runs/${{ github.run_id }}
          Release-Notes: $RELEASE_NOTES_URL
          EndOfFile
  
          # Create temporary branch to push the release commit- required for PREVIEW releases
          gh api --method POST /repos/:owner/:repo/git/refs -f ref="refs/heads/$TEMPORARY_BRANCH" -f sha="$GITHUB_SHA"
  
          release_commit_id=$(gh api --method PUT /repos/:owner/:repo/contents/$VERSION_FILE_PATH \
            --field branch="$TEMPORARY_BRANCH" \
            --field message="@commit-message.txt" \
            --field sha="$VERSION_FILE_INITIAL_SHA" \
            --field content="$VERSION_FILE_RELEASE_CONTENT" --jq '.commit.sha')
            
          # Also update the API file in the same commit
          release_commit_id_2=$(gh api --method PUT /repos/:owner/:repo/contents/$API_FILE_PATH \
            --field branch="$TEMPORARY_BRANCH" \
            --field message="@commit-message.txt" \
            --field sha="$API_FILE_INITIAL_SHA" \
            --field content="$API_FILE_RELEASE_CONTENT" --jq '.commit.sha')
          
          # TODO: Confirm the commit IDs are the same
          echo "RELEASE_COMMIT_ID=$release_commit_id"
          echo "RELEASE_COMMIT_ID_2=$release_commit_id_2"

          cat << EndOfFile >> $GITHUB_OUTPUT
          release_tag=$RELEASE_TAG
          release_notes_url=$RELEASE_NOTES_URL
          release_version=$RELEASE_VERSION
          release_commit_id=$release_commit_id
          version_file_path=$VERSION_FILE_PATH
          version_file_release_sha=$VERSION_FILE_RELEASE_SHA
          version_file_post_release_content=$VERSION_FILE_POST_RELEASE_CONTENT
          api_file_path=$API_FILE_PATH
          api_file_release_sha=$API_FILE_RELEASE_SHA
          api_file_post_release_content=$API_FILE_POST_RELEASE_CONTENT
          EndOfFile
          
          # Temporarily put everything in step summary for debugging
          cat << EndOfFile >> $GITHUB_STEP_SUMMARY
          release_tag=$RELEASE_TAG
          release_notes_url=$RELEASE_NOTES_URL
          release_version=$RELEASE_VERSION
          release_commit_id=$release_commit_id
          version_file_path=$VERSION_FILE_PATH
          version_file_release_sha=$VERSION_FILE_RELEASE_SHA
          version_file_post_release_content=$VERSION_FILE_POST_RELEASE_CONTENT
          api_file_path=$API_FILE_PATH
          api_file_release_sha=$API_FILE_RELEASE_SHA
          api_file_post_release_content=$API_FILE_POST_RELEASE_CONTENT
          EndOfFile