name: Test

on:
  pull_request:
  merge_group:
    types: [checks_requested]
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Check for Android changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      android: ${{ steps.filter.outputs.android }}
    steps:
    - uses: actions/checkout@v5
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          android:
            - 'android/**'
            - '.github/**'          

  test:
    name: test and lint
    needs: changes
    if: ${{ needs.changes.outputs.android == 'true' }}
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.GU_ANDROID_CLIENT_ID }}
          private-key: ${{ secrets.GU_ANDROID_PRIVATE_KEY }}
          permission-contents: write

      - uses: actions/checkout@v5
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@83c124bfb09badf85ddfbf01158b5592c1a78c4a # v4.4.2
        with:
          gradle-version: wrapper

      - name: Check licenses
        id: license-check
        run: |
          cd android
          ./gradlew licensee

      - name: Run ktlint
        run: |
          cd android
          ./gradlew lint lintKotlin :build-logic:convention:lint --continue

      - name: Run detekt
        if: success() || failure()
        run: |
          cd android
          ./gradlew detektDebug --continue

      - name: Upload SARIF report for code scanning report
        uses: github/codeql-action/upload-sarif@3599b3baa15b485a2e49ef411a7a4bb2452e7f93 # v3.30.5
        if: success() || failure()
        with:
          sarif_file: android/build/reports/detekt/merge.sarif
          # Used to differentiate multiple results for one commit
          category: detekt

      - name: Run screenshot tests
        id: screenshot-tests
        if: success() || failure()
        run: |
          cd android
          ./gradlew verifyPaparazziDebug --continue --quiet

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Create companion branch and comment content
        id: create-companion-branch
        # Don't run on merge queue branches
        if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue/') && steps.screenshot-tests.outcome != 'success' }}
        shell: bash
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          # Use GitHub app as user for git commands
          git config --global user.name "${{ steps.app-token.outputs.app-slug }}[bot]"
          git config --global user.email "${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com"
  
          # Name for companion branch
          COMPANION_BRANCH=companion/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}

          git branch -D "$COMPANION_BRANCH" || true
          git checkout "$COMPANION_BRANCH" || git checkout -B "$COMPANION_BRANCH"

          # Find all the files starting with delta-*.png
          files_to_add=$(find . -type f -name "delta-*.png")
          
          # Check for invalid file names and add only valid ones
          for file in $files_to_add; do
            git add -f "$file"
          done
          
          # Don't commit any other files
          git restore .

          git commit -m "Add screenshot diff"
          git push origin HEAD:"$COMPANION_BRANCH" -f
          
          delimiter="$(openssl rand -hex 8)"
          {
            echo "reports<<${delimiter}"

            # Create markdown table header
            echo "**Screenshot tests failed**<br/>${#files_to_add[@]} failures. Please check the failure diffs:"
            echo "| Image |"
            echo "|-------|"
          } >> "$GITHUB_OUTPUT"

          # Iterate over the files and create table rows
          for file in $files_to_add; do
            # Get the file name, strip down to only test class and function name
            fileName=$(basename "$file" | sed 's/^[^_]*_//')
            echo "| $fileName ![](https://github.com/${{ github.repository }}/blob/$COMPANION_BRANCH/$file?raw=true) |" >> "$GITHUB_OUTPUT"
          done
          echo "${delimiter}" >> "$GITHUB_OUTPUT"
          echo "BRANCH IS ${GITHUB_REF}"

      - name: Find Comment
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e # v3.1.0
        id: find-comment
        # Don't run on merge queue branches
        if: ${{ always() && !startsWith(github.ref, 'refs/heads/gh-readonly-queue/') && github.ref != 'refs/heads/main' && steps.license-check.outcome == 'success' }}
        with:
          token: ${{ steps.app-token.outputs.token }}
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Screenshot tests failed

      - name: Add or update comment on PR
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        # Don't run on merge queue branches, only run if screenshot tests failed and companion branch created
        if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue/')  && github.ref != 'refs/heads/main' && steps.screenshot-tests.outcome != 'success' && steps.create-companion-branch.outcome == 'success'}}
        with:
          token: ${{ steps.app-token.outputs.token }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: ${{ steps.create-companion-branch.outputs.reports }}
          edit-mode: replace

      - name: Resolve comment on PR
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        # Don't run on merge queue branches, only run if screenshot tests passed and comment exists
        if: ${{ !startsWith(github.ref, 'refs/heads/gh-readonly-queue/')  && github.ref != 'refs/heads/main' && steps.screenshot-tests.outcome == 'success'  && steps.find-comment.outputs.comment-id != '' }}
        with:
          token: ${{ steps.app-token.outputs.token }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: |
            **Screenshot tests failed**
            Errors resolved.
          edit-mode: replace

      - name: Cleanup outdated companion branches
        if: always()
        run: |
          # Use GitHub app as user for git commands
          git config --global user.name "${{ steps.app-token.outputs.app-slug }}[bot]"
          git config --global user.email "${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com"

          # Find outdated companion branches with last commit date
          git branch -r --format="%(refname:lstrip=3)" | grep companion/ | while read -r branch; do
            last_commit_date_timestamp=$(git log -1 --format=%ct "origin/$branch")
            now_timestamp=$(date +%s)
            echo "branch: $branch now_timestamp: $now_timestamp last_commit_date_timestamp: $last_commit_date_timestamp"
            # For testing purpose, delete branch if it's older than 1 second
            # if [ $((now_timestamp - last_commit_date_timestamp)) -gt 1 ]; then
            # Delete branch if it's older than 1 month
            if [ $((now_timestamp - last_commit_date_timestamp)) -gt 2592000 ]; then
              echo "Deleting $branch"
              git push origin --delete "$branch"
            fi
          done
